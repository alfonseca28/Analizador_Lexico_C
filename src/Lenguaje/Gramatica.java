/* Gramatica.java */
/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
import java.util.*;
import java.io.*;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;


class Gramatica implements GramaticaConstants {

static ArrayList<String> nombreVariable = new ArrayList<String>();
    static ArrayList<String> tipoDato = new ArrayList<String>();
    static ArrayList<String> valorAlmacenado = new ArrayList<String>();

    static ArrayList<Integer> finCiclo = new ArrayList<Integer>();

    static ArrayList<String> erroresLexicos = new ArrayList<String>();
    static ArrayList<String> erroresSintacticos = new ArrayList<String>();
    static ArrayList<String> erroresSemanticos = new ArrayList<String>();
    static ArrayList<String> colaOperacion = new ArrayList<String>();


    static String nombreV ="";
    static String tipoD ="";
    static String valorV="nulo";
    static boolean ident = false;
    static boolean decAritmetica = false;
    static boolean asignacion_a = false;

    static String cod = "";

    public static void main(String[] args )  throws FileNotFoundException {

    System.out.println("Ingresa el nombre del archivo que quieres analizar");
    Scanner entrada = new Scanner (System.in);
    String str = entrada.next();

    str+= ".txt";

    File fichero3 = new File(cod+"_generacion_intermedia.txt");

    if(fichero3.delete())System.out.println("");

    FileReader file = new FileReader(str);
    BufferedReader buffer = new BufferedReader (file);
    Gramatica analizador = new Gramatica (buffer);
        inicio(str,file,buffer,analizador);

        System.out.println("Nombres de variables");
            for(String dato : nombreVariable){
                System.out.println("nombre ->"+dato);
            }
            System.out.println("Tipos de dato de variables");
            for(String dato : tipoDato){
                System.out.println("td -> "+dato);
            }
            System.out.println("Valor almacenado en las variables");
            for(String dato : valorAlmacenado){
                System.out.println("va -> " +dato);
            }
    }


    static void inicio(String str,FileReader file, BufferedReader buffer,Gramatica analizador)throws FileNotFoundException {
        try{
            analizador.Programa();
        }catch (ParseException e) {
            Token t;
            do {
                t = getNextToken();
                if(t.kind== EOF)break;
            }while (t!=null && t.kind != EOF  );
        }

        if(erroresLexicos.isEmpty() && erroresSintacticos.isEmpty() && erroresSemanticos.isEmpty()){
            System.out.println("Ejecucion finalizada sin errores");

        }
        else{

            int ntotal = erroresLexicos.size()+erroresSemanticos.size()+erroresSintacticos.size();

            if(ntotal==1)    System.out.println("\u005cnEjecucion finalizada con "+ntotal+" error " );
            else    System.out.println("\u005cnEjecucion finalizada con "+ntotal+" errores " );

            if(!erroresLexicos.isEmpty()){
                System.out.println("");
                if(erroresLexicos.size()==1) System.out.println("Se ha encontrado " +erroresLexicos.size() + " error lexico");
                else System.out.println("Se han encontrado " +erroresLexicos.size() + " errores lexicos");

                for (String impresion: erroresLexicos) {
                    System.out.println(impresion);
                }
            }

            if(!erroresSintacticos.isEmpty()){
                System.out.println("");
                if(erroresSintacticos.size()==1) System.out.println("Se ha encontrado " +erroresSintacticos.size() + " error sintactico");

                else System.out.println("Se han encontrado " +erroresSintacticos.size() + " errores sintacticos");

                System.out.println("");

                for (String impresion: erroresSintacticos) {
                    System.out.println(impresion);
                }
            }

            if(!erroresSemanticos.isEmpty()){

                System.out.println("");
                if(erroresSemanticos.size()==1)
                    System.out.println("Se ha encontrado " +erroresSemanticos.size() + " error semantico");
                else
                    System.out.println("Se han encontrado " +erroresSemanticos.size() + " errores semanticos");

                System.out.println("");

                for (String impresion: erroresSemanticos) {
                    System.out.println(impresion);
                }
            }

        }
    }


static void errorData(Token currentTokenVal,
                        int[][] expectedTokenSequencesVal,
                        String[] tokenImageVal){
    String eol = System.getProperty("line.separator", "\u005cn");
    Token currentToken = currentTokenVal;
    int [][] expectedTokenSequences = expectedTokenSequencesVal;
    String[] tokenImage = tokenImageVal;
    StringBuffer expected = new StringBuffer();
    int maxSize = 0;
    for (int i = 0; i < expectedTokenSequences.length; i++) {
      if (maxSize < expectedTokenSequences[i].length) {
        maxSize = expectedTokenSequences[i].length;
      }
      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
      }
      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
        expected.append("...");
      }
      expected.append(eol).append("    ");
    }


    if(currentToken.next.kind == 0)return;

    String retval = "";


    retval+="Error Sintactico, ";
    retval += "Se ha encontrado \u005c"";
    Token tok = currentToken.next;
    for (int i = 0; i < maxSize; i++) {
      if (i != 0) retval += " ";
      if (tok.kind == 0) {
        retval += tokenImage[0];
        break;
      }
      retval += " " + tokenImage[tok.kind];
      retval += " \u005c"";
      retval += add_escapes(tok.image);
      retval += " \u005c"";
      tok = tok.next;
    }
    retval += "\u005c" en la linea " + currentToken.next.beginLine + ", columna " + currentToken.next.beginColumn;
    retval += "." + eol;
    if (expectedTokenSequences.length == 1) {
      retval += "Se esperaba:" + eol + "    ";
    } else {
      retval += "Se esperaba:" + eol + "    ";
    }
    retval += expected.toString();

    erroresSintacticos.add(retval);
    }

    static String add_escapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\u005cb':
              retval.append("\u005c\u005cb");
              continue;
           case '\u005ct':
              retval.append("\u005c\u005ct");
              continue;
           case '\u005cn':
              retval.append("\u005c\u005cn");
              continue;
           case '\u005cf':
              retval.append("\u005c\u005cf");
              continue;
           case '\u005cr':
              retval.append("\u005c\u005cr");
              continue;
           case '\u005c"':
              retval.append("\u005c\u005c\u005c"");
              continue;
           case '\u005c'':
              retval.append("\u005c\u005c\u005c'");
              continue;
           case '\u005c\u005c':
              retval.append("\u005c\u005c\u005c\u005c");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\u005c\u005cu" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();

    }

//----------------------------------------ANALIZADOR SINTACTICO----------------------------------------

//aqui se van a crear funciones (expresiones regulares) mendiante javacc para que se analizen las
//estructuras basicas del lenguaje (el lenguaje a analizar es c)
  static final public 
void Programa() throws ParseException {
    label_1:
    while (true) {
      Librerias();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIBRERIAS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(MAIN);
    jj_consume_token(PARENTESIS_APERTURA);
    jj_consume_token(PARENTESIS_CIERRE);
    jj_consume_token(LLAVE_APERTURA);
    Bloque();
    jj_consume_token(RETURN);
    jj_consume_token(NUMEROS);
    jj_consume_token(PUNTO_COMA);
    jj_consume_token(LLAVE_CIERRE);
    jj_consume_token(0);
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public void Librerias() throws ParseException {
    jj_consume_token(LIBRERIAS);
    jj_consume_token(NOMLIBRERIA);
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
void Bloque() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case FLOAT:
      case CHAR:
      case BOOLEAN:
      case SHORT:
      case STRING:
      case DOUBLE:
      case VOID:
      case FOR:
      case WHILE:
      case DO:
      case IF:
      case SWITCH:
      case SCANF:
      case PRINTF:
      case NOMBREVAR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Sentencias();
    }
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
void Sentencias() throws ParseException {
    if (jj_2_1(3)) {
      Declaraciones();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:{
        cicloWhile();
        break;
        }
      case PRINTF:{
        Impresion();
        break;
        }
      case SCANF:{
        Lectura();
        break;
        }
      case IF:{
        Cond_IF();
        break;
        }
      case NOMBREVAR:{
        asignacionAritmetica();
        break;
        }
      case FOR:{
        cicloFor();
        break;
        }
      case DO:{
        cicloDoWhile();
        break;
        }
      case SWITCH:{
        Swich();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
void Declaraciones() throws ParseException {
    if (jj_2_2(3)) {
      declaracionConValor();
    } else if (jj_2_3(3)) {
      declaracionSimple();
    } else if (jj_2_4(3)) {
      declaracionMultipleConValor();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case FLOAT:
      case CHAR:
      case BOOLEAN:
      case SHORT:
      case STRING:
      case DOUBLE:
      case VOID:{
        declaracionMultipleSimple();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
void declaracionSimple() throws ParseException {String tipo;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
        break;
        }
      case SHORT:{
        jj_consume_token(SHORT);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        break;
        }
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
guardarTipoDato();
      jj_consume_token(NOMBREVAR);
guardarNombreV();
      delimiter();
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        }
        while (t.kind != INT && t.kind != FLOAT && t.kind != CHAR && t.kind != SHORT &&  t.kind != DOUBLE
        && t.kind != VOID && t.kind != BOOLEAN && t!=null && t.kind != EOF );
    }
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
void declaracionConValor() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
        break;
        }
      case SHORT:{
        jj_consume_token(SHORT);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        break;
        }
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
guardarTipoDato();
      jj_consume_token(NOMBREVAR);
guardarNombreV();
      jj_consume_token(ASIGNAR);
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        }
        while (t.kind != INT && t.kind != FLOAT && t.kind != CHAR && t.kind != SHORT &&  t.kind != DOUBLE
        && t.kind != VOID && t.kind != BOOLEAN && t!=null && t.kind != EOF );
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMEROS:{
        jj_consume_token(NUMEROS);
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      case NOMBREVAR:{
        jj_consume_token(NOMBREVAR);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
guardarValorV();
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        }
        while (t.kind != NUMEROS && t.kind != CADENA && t.kind != NOMBREVAR
        && t.kind != VOID && t!=null && t.kind != EOF );
    }
    delimiter();
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
void declaracionMultipleSimple() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
        break;
        }
      case SHORT:{
        jj_consume_token(SHORT);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        break;
        }
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(NOMBREVAR);
guardarNombreV();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMA);
        jj_consume_token(NOMBREVAR);
guardarNombreV();
      }
      delimiter();
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        }
        while (t.kind != INT && t.kind != FLOAT && t.kind != CHAR && t.kind != SHORT &&  t.kind != DOUBLE
        && t.kind != VOID && t.kind != BOOLEAN && t!=null && t.kind != EOF);
    }
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
void declaracionMultipleConValor() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
        break;
        }
      case SHORT:{
        jj_consume_token(SHORT);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        break;
        }
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
guardarTipoDato();
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        }
        while (t.kind != INT && t.kind != FLOAT && t.kind != CHAR && t.kind != SHORT &&  t.kind != DOUBLE
        && t.kind != VOID && t.kind != BOOLEAN && t!=null && t.kind != EOF );
    }
    try {
      jj_consume_token(NOMBREVAR);
guardarNombreV();
      jj_consume_token(ASIGNAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMEROS:{
        jj_consume_token(NUMEROS);
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      case NOMBREVAR:{
        jj_consume_token(NOMBREVAR);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
guardarValorV();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMA);
        jj_consume_token(NOMBREVAR);
guardarNombreV();
        jj_consume_token(ASIGNAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMEROS:{
          jj_consume_token(NUMEROS);
          break;
          }
        case CADENA:{
          jj_consume_token(CADENA);
          break;
          }
        case NOMBREVAR:{
          jj_consume_token(NOMBREVAR);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
guardarValorV();
      }
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        }
        while (t.kind != NUMEROS && t.kind != CADENA && t.kind != NOMBREVAR
        && t.kind != VOID && t!=null && t.kind != EOF );
    }
    delimiter();
  }

//-----------------------------------------------------------------------------------------------------------------

    //ASIGNAR VALORES A LAS VARIABLES
  static final public     void asignacionAritmetica() throws ParseException {
    try {
      jj_consume_token(NOMBREVAR);
      jj_consume_token(ASIGNAR);
      operacion();
      delimiter();
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != ASIGNAR && t.kind != NOMBREVAR
            && t.kind != VOID && t!=null && t.kind != EOF );
    }
  }

//-----------------------------------------------------------------------------------------------------------------

    //REALIZAR OPERACIONES
  static final public     void operacion() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMEROS:{
        jj_consume_token(NUMEROS);
        break;
        }
      case NOMBREVAR:{
        jj_consume_token(NOMBREVAR);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUMA:
        case RESTA:
        case MULTIPLICACION:
        case DIVISION:
        case MODULO:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUMA:{
          jj_consume_token(SUMA);
          break;
          }
        case RESTA:{
          jj_consume_token(RESTA);
          break;
          }
        case MULTIPLICACION:{
          jj_consume_token(MULTIPLICACION);
          break;
          }
        case DIVISION:{
          jj_consume_token(DIVISION);
          break;
          }
        case MODULO:{
          jj_consume_token(MODULO);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMEROS:{
          jj_consume_token(NUMEROS);
          break;
          }
        case NOMBREVAR:{
          jj_consume_token(NOMBREVAR);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != NUMEROS && t.kind != NOMBREVAR && t.kind != SUMA && t.kind != RESTA && t.kind != MULTIPLICACION
            && t.kind != DIVISION && t.kind != MODULO && t.kind != VOID && t!=null && t.kind != EOF );
    }
  }

//-----------------------------------------------------------------------------------------------------------------

    //INCREMENTAR O DECREMENTAR
  static final public void incrementoDecremento() throws ParseException {
    try {
      jj_consume_token(NOMBREVAR);
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        }
        while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != NOMBREVAR);
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCREMENTO:{
        jj_consume_token(INCREMENTO);
        break;
        }
      case DECREMENTO:{
        jj_consume_token(DECREMENTO);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        }
        while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != INCREMENTO && t.kind != DECREMENTO);
    }
  }

//-----------------------------------------------------------------------------------------------------------------

    //FUNCION PARA IMPRIMIR
  static final public     void Impresion() throws ParseException {
    try {
      jj_consume_token(PRINTF);
      jj_consume_token(PARENTESIS_APERTURA);
      jj_consume_token(CADENA);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMA);
        jj_consume_token(NOMBREVAR);
      }
      jj_consume_token(PARENTESIS_CIERRE);
      delimiter();
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != PRINTF && t.kind != PARENTESIS_APERTURA
            && t.kind != CADENA && t.kind != COMA && t.kind != NOMBREVAR && t.kind != PARENTESIS_CIERRE);
    }
  }

//-----------------------------------------------------------------------------------------------------------------

    //FUNCION PARA LEER O ESCANEAR DATOS DE ENTRADA
  static final public     void Lectura() throws ParseException {
    try {
      jj_consume_token(SCANF);
      jj_consume_token(PARENTESIS_APERTURA);
      jj_consume_token(CADENA);
      jj_consume_token(COMA);
      jj_consume_token(AMPERSAND);
      jj_consume_token(NOMBREVAR);
      jj_consume_token(PARENTESIS_CIERRE);
      delimiter();
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != SCANF && t.kind != PARENTESIS_APERTURA
            && t.kind != CADENA && t.kind != COMA && t.kind != NOMBREVAR && t.kind != PARENTESIS_CIERRE
            && t.kind != AMPERSAND);
    }
  }

//-----------------------------------------------------------------------------------------------------------------

    //FUNCION PARA HACER COMPARACIONES ENTRE VARAIBLES (CONDICION)
  static final public     void comparacionLogica() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        jj_consume_token(NOT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOMBREVAR:{
          jj_consume_token(NOMBREVAR);
          break;
          }
        case NUMEROS:{
          jj_consume_token(NUMEROS);
          break;
          }
        case CADENA:{
          jj_consume_token(CADENA);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case NOMBREVAR:{
        jj_consume_token(NOMBREVAR);
        break;
        }
      case NUMEROS:{
        jj_consume_token(NUMEROS);
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != NOT && t.kind != NOMBREVAR
            && t.kind != NUMEROS && t.kind != CADENA);
    }
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IGUAL:
        case DIFERENTE:
        case MENOR:
        case MAYOR:
        case MENOR_IGUAL:
        case MAYOR_IGUAL:
        case AND:
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IGUAL:{
          jj_consume_token(IGUAL);
          break;
          }
        case DIFERENTE:{
          jj_consume_token(DIFERENTE);
          break;
          }
        case MENOR:{
          jj_consume_token(MENOR);
          break;
          }
        case MAYOR:{
          jj_consume_token(MAYOR);
          break;
          }
        case MENOR_IGUAL:{
          jj_consume_token(MENOR_IGUAL);
          break;
          }
        case MAYOR_IGUAL:{
          jj_consume_token(MAYOR_IGUAL);
          break;
          }
        case AND:{
          jj_consume_token(AND);
          break;
          }
        case OR:{
          jj_consume_token(OR);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NOMBREVAR:{
            jj_consume_token(NOMBREVAR);
            break;
            }
          case NUMEROS:{
            jj_consume_token(NUMEROS);
            break;
            }
          case CADENA:{
            jj_consume_token(CADENA);
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case NOMBREVAR:{
          jj_consume_token(NOMBREVAR);
          break;
          }
        case NUMEROS:{
          jj_consume_token(NUMEROS);
          break;
          }
        case CADENA:{
          jj_consume_token(CADENA);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != NOT && t.kind != NOMBREVAR
            && t.kind != NUMEROS && t.kind != CADENA);
    }
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 

void Cond_IF() throws ParseException {
    try {
      jj_consume_token(IF);
      jj_consume_token(PARENTESIS_APERTURA);
      comparacionLogica();
      jj_consume_token(PARENTESIS_CIERRE);
      jj_consume_token(LLAVE_APERTURA);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case FLOAT:
        case CHAR:
        case BOOLEAN:
        case SHORT:
        case STRING:
        case DOUBLE:
        case VOID:
        case FOR:
        case WHILE:
        case DO:
        case IF:
        case SWITCH:
        case SCANF:
        case PRINTF:
        case NOMBREVAR:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_8;
        }
        Sentencias();
      }
      jj_consume_token(LLAVE_CIERRE);
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != IF && t.kind != PARENTESIS_APERTURA
            && t.kind != PARENTESIS_CIERRE && t.kind != LLAVE_APERTURA && t.kind != LLAVE_CIERRE);
    }
    try {
      label_9:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(ELSE);
        jj_consume_token(IF);
        jj_consume_token(PARENTESIS_APERTURA);
        comparacionLogica();
        jj_consume_token(PARENTESIS_CIERRE);
        jj_consume_token(LLAVE_APERTURA);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT:
          case FLOAT:
          case CHAR:
          case BOOLEAN:
          case SHORT:
          case STRING:
          case DOUBLE:
          case VOID:
          case FOR:
          case WHILE:
          case DO:
          case IF:
          case SWITCH:
          case SCANF:
          case PRINTF:
          case NOMBREVAR:{
            ;
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            break label_10;
          }
          Sentencias();
        }
        jj_consume_token(LLAVE_CIERRE);
      }
      label_11:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(ELSE);
        jj_consume_token(LLAVE_APERTURA);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT:
          case FLOAT:
          case CHAR:
          case BOOLEAN:
          case SHORT:
          case STRING:
          case DOUBLE:
          case VOID:
          case FOR:
          case WHILE:
          case DO:
          case IF:
          case SWITCH:
          case SCANF:
          case PRINTF:
          case NOMBREVAR:{
            ;
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            break label_12;
          }
          Sentencias();
        }
        jj_consume_token(LLAVE_CIERRE);
      }
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        }
        while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != IF && t.kind != PARENTESIS_APERTURA
        && t.kind != PARENTESIS_CIERRE && t.kind != LLAVE_APERTURA && t.kind != LLAVE_CIERRE
        && t.kind != ELSE);
    }
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
void cicloFor() throws ParseException {
    try {
      jj_consume_token(FOR);
      jj_consume_token(PARENTESIS_APERTURA);
      jj_consume_token(NOMBREVAR);
      jj_consume_token(ASIGNAR);
      jj_consume_token(NUMEROS);
      delimiter();
      jj_consume_token(NOMBREVAR);
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != FOR && t.kind != PARENTESIS_APERTURA
            && t.kind != NOMBREVAR && t.kind != ASIGNAR && t.kind != NUMEROS);
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MENOR:{
        jj_consume_token(MENOR);
        break;
        }
      case MAYOR:{
        jj_consume_token(MAYOR);
        break;
        }
      case MENOR_IGUAL:{
        jj_consume_token(MENOR_IGUAL);
        break;
        }
      case MAYOR_IGUAL:{
        jj_consume_token(MAYOR_IGUAL);
        break;
        }
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      case DIFERENTE:{
        jj_consume_token(DIFERENTE);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMEROS:{
        jj_consume_token(NUMEROS);
        break;
        }
      case NOMBREVAR:{
        jj_consume_token(NOMBREVAR);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      delimiter();
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != MENOR && t.kind != MAYOR
            && t.kind != MENOR_IGUAL && t.kind != MAYOR_IGUAL && t.kind != IGUAL && t.kind != DIFERENTE
            && t.kind != NUMEROS && t.kind != NOMBREVAR);
    }
    try {
      jj_consume_token(NOMBREVAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCREMENTO:{
        jj_consume_token(INCREMENTO);
        break;
        }
      case DECREMENTO:{
        jj_consume_token(DECREMENTO);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PARENTESIS_CIERRE);
      jj_consume_token(LLAVE_APERTURA);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case FLOAT:
        case CHAR:
        case BOOLEAN:
        case SHORT:
        case STRING:
        case DOUBLE:
        case VOID:
        case FOR:
        case WHILE:
        case DO:
        case IF:
        case SWITCH:
        case SCANF:
        case PRINTF:
        case NOMBREVAR:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_13;
        }
        Sentencias();
      }
      jj_consume_token(LLAVE_CIERRE);
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        }
        while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != INCREMENTO && t.kind != DECREMENTO
        && t.kind != PARENTESIS_CIERRE && t.kind != LLAVE_APERTURA && t.kind != LLAVE_CIERRE
        && t.kind != NUMEROS && t.kind != NOMBREVAR);
    }
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
    void cicloWhile() throws ParseException {
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PARENTESIS_APERTURA);
      comparacionLogica();
      jj_consume_token(PARENTESIS_CIERRE);
      jj_consume_token(LLAVE_APERTURA);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case FLOAT:
        case CHAR:
        case BOOLEAN:
        case SHORT:
        case STRING:
        case DOUBLE:
        case VOID:
        case FOR:
        case WHILE:
        case DO:
        case IF:
        case SWITCH:
        case SCANF:
        case PRINTF:
        case NOMBREVAR:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_14;
        }
        Sentencias();
      }
      jj_consume_token(LLAVE_CIERRE);
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != WHILE && t.kind != PARENTESIS_APERTURA
            && t.kind != PARENTESIS_CIERRE && t.kind != LLAVE_APERTURA && t.kind != LLAVE_CIERRE);
    }
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
    void cicloDoWhile() throws ParseException {
    try {
      jj_consume_token(DO);
      jj_consume_token(LLAVE_APERTURA);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case FLOAT:
        case CHAR:
        case BOOLEAN:
        case SHORT:
        case STRING:
        case DOUBLE:
        case VOID:
        case FOR:
        case WHILE:
        case DO:
        case IF:
        case SWITCH:
        case SCANF:
        case PRINTF:
        case NOMBREVAR:{
          ;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          break label_15;
        }
        Sentencias();
      }
      jj_consume_token(LLAVE_CIERRE);
      jj_consume_token(WHILE);
      jj_consume_token(PARENTESIS_APERTURA);
      comparacionLogica();
      jj_consume_token(PARENTESIS_CIERRE);
      delimiter();
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != WHILE && t.kind != PARENTESIS_APERTURA
            && t.kind != PARENTESIS_CIERRE && t.kind != LLAVE_APERTURA && t.kind != LLAVE_CIERRE && t.kind != DO);
    }
  }

//-----------------------------------------------------------------------------------------------------------------
  static final public 
    void Swich() throws ParseException {
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(PARENTESIS_APERTURA);
      jj_consume_token(NOMBREVAR);
      jj_consume_token(PARENTESIS_CIERRE);
      jj_consume_token(LLAVE_APERTURA);
      label_16:
      while (true) {
        jj_consume_token(CASE);
        jj_consume_token(NUMEROS);
        jj_consume_token(DOS_PUNTOS);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT:
          case FLOAT:
          case CHAR:
          case BOOLEAN:
          case SHORT:
          case STRING:
          case DOUBLE:
          case VOID:
          case FOR:
          case WHILE:
          case DO:
          case IF:
          case SWITCH:
          case SCANF:
          case PRINTF:
          case NOMBREVAR:{
            ;
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            break label_17;
          }
          Sentencias();
        }
        jj_consume_token(BREAK);
        delimiter();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_16;
        }
      }
      jj_consume_token(LLAVE_CIERRE);
    } catch (ParseException e) {
Token t;
            errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
            System.out.println("");
            do {
                t = getNextToken();
            }
            while (t.kind != VOID && t!=null && t.kind != EOF && t.kind != SWITCH && t.kind != PARENTESIS_APERTURA
            && t.kind != NOMBREVAR && t.kind != LLAVE_APERTURA && t.kind != LLAVE_CIERRE && t.kind != PARENTESIS_CIERRE
            && t.kind != CASE && t.kind != NUMEROS && t.kind != DOS_PUNTOS && t.kind != BREAK);
    }
  }

//-------------------------------------------------------------------------------------------------------------------
  static final public 
void delimiter() throws ParseException {
    try {
      jj_consume_token(PUNTO_COMA);
    } catch (ParseException e) {
Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
        do {
            t = getNextToken();
        } while (t.kind != PUNTO_COMA && t!=null && t.kind != EOF );
    }
  }

  static public void guardarNombreV() throws ParseException {nombreV=token.image;
        //System.out.println(nombreV);
        if(nombreVariable.contains(nombreV)){
            erroresSemanticos.add("error");
        }
        nombreVariable.add(nombreV);
  }

  static public void guardarTipoDato() throws ParseException {tipoD=token.image;
        tipoDato.add(tipoD);
        //System.out.println(tipoD);

  }

  static public void guardarValorV() throws ParseException {valorV=token.image;
        valorAlmacenado.add(valorV);
        //System.out.println(valorV);   

  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(NOMBREVAR)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(PUNTO_COMA)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(NOMBREVAR)) return true;
    if (jj_scan_token(ASIGNAR)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(NOMBREVAR)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(LLAVE_APERTURA)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(NOMBREVAR)) return true;
    if (jj_scan_token(ASIGNAR)) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_scan_token(COMA)) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GramaticaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0xbc03fc00,0xbc000000,0x3fc00,0x3fc00,0x3fc00,0x0,0x3fc00,0x0,0x3fc00,0x0,0x0,0x0,0x0,0xdc0000,0xdc0000,0x0,0x3000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbc03fc00,0xbc03fc00,0xbc03fc00,0x0,0x0,0x3000000,0xbc03fc00,0xbc03fc00,0xbc03fc00,0xbc03fc00,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100000c,0x100000c,0x0,0x0,0x0,0x7000000,0x0,0x200000,0x0,0x7000000,0x200000,0x7000000,0x5000000,0x0,0x0,0x5000000,0x0,0x200000,0x7000000,0x7002000,0x1bf0,0x1bf0,0x7000000,0x7002000,0x100000c,0x100000c,0x100000c,0x3f0,0x5000000,0x0,0x100000c,0x100000c,0x100000c,0x100000c,0x1,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
